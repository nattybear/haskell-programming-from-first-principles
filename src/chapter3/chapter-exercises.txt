Reading syntax

1.
v a) concat [[1, 2, 3], [4, 5, 6]]
  b) ++ [1, 2, 3] [4, 5, 6]
v c) (++) "hello" " world"
  d) ["hello" ++ " world]
  e) 4 !! "hello"
v f) (!!) "hello" 4
  g) take "4 lovely"
v h) take 3 "awesome"

2.
  a) concat [[1 * 6], [2 * 6], [3 * 6]]
  d) [6,12,18]

  b) "rain" ++ drop 2 "elbow"
  c) "rainbow"

  c) 10 * head [1, 2, 3]
  e) 10

  d) (take 3 "Julie") ++ (tail "yes")
  a) "Jules"

  e) concat [tail [1, 2, 3],
             tail [4, 5, 6],
             tail [7, 8, 9]]
  b) [2,3,5,6,8,9]

Building functions

1.
  a) "Curry is awesome" ++ "!"
  b) "Curry is awesome!" !! 4
  c) drop 9 "Curry is awesome!"

2.

foo x = x ++ "!"

bar x = bar !! 4

baz x = drop 9 x

3.

thirdLetter :: String -> Char
thirdLetter x = x !! 2

4.

letterIndex :: Int -> Char
letterIndex x = "Curry is awesome!" !! x

5.

rvrs :: String -> String
rvrs x = concat [awesome, is, curry]
  where awesome = drop 9 x
        is = take 4 (drop 5 x)
        curry = take 5 x
