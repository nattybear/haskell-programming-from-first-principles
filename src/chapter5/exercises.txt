Exercises: Type matching

  a) not    :: Bool -> Bool
  b) length :: [a] -> Int
  c) concat :: [[a]] -> [a]
  d) head   :: [a] -> a
  e) (<)    :: Ord a => a -> a -> Bool

Exercises: Type arguments

1. If the type of f is a -> a -> a -> a, and the type of x is Char, then
   the type of f x is:

 v a) Char -> Char -> Char
   b) x -> x -> x -> x
   c) a -> a -> a
   d) a -> a -> a -> Char

2. If the type of g is a -> b -> c -> b, then the type of
   g 0 'c' "woot" is:

   a) String
   b) Char -> String
   c) Int
 v d) Char

3. If the type of h is (Num a, Num b) => a -> b -> b, then the type of
   h 1.0 2 is:

   a) Double
   b) Integer
   c) Integral b => b
 v d) Num b => b

4. If the type of h is (Num a, Num b) => a -> b -> b, then the type of
   h 1 (5.5 :: Double) is:

   a) Integer
   b) Fractional b => b
 v c) Double
   d) Num b => b

5. If the type of jackal is (Ord a, Eq b) => a -> b -> a, then the type
   of jackal "keyboard" "has the word jackal in it" is:

 v a) [Char]
   b) Eq b => b
   c) b -> [Char]
   d) b
   e) Eq b => b -> [Char]

6. If the type of jackal is (Ord a, Eq b) => a -> b -> a, then the type
   of jackal "keyboard" is:

   a) b
   b) Eq b => b
   c) [Char]
   d) b -> [Char]
 v e) Eq b => b -> [Char]

7. If the type of kessel is (Ord a, Num b) => a -> b -> a, then the
   type of kessel 1 2 is:

   a) Integer
   b) Int
   c) a
 v d) (Num a, Ord a) => a
   e) Ord a => a
   f) Num a => a

8. If the type of kessel is (Ord a, Num b) => a -> b -> a, then the
   type of kessel 1 (2 :: Integer) is:

 v a) (Num a, Ord a) => a
   b) Int
   c) a
   d) Num a => a
   e) Ord a => a
   f) Integer

9. If the type of kessel is (Ord a, Num b) => a -> b -> a, then the
   type of kessel (1 :: Integer) 2 is:

   a) Num a => a
   b) Ord a => a
 v c) Integer
   d) (Num a, Ord a) => a
   e) a

Exercises: Apply yourself

1. myConcat x = x ++ " yo"

myConcat :: String -> String

2. myMult x = (x / 3) * 5

myMult :: Fractional a => a -> a

3. myTake x = take x "hey you"

myTake :: Int -> String

4. myCom x = x > (length [1..10])

myCom :: Int -> Bool

5. myAlph x = x < 'z'

myAlph :: Char

Does it compile?

1. bigNum = (^) 5 $ 10  -- 5 ^ 10
   wahoo = bigNum $ 10

   It does not compile, bigNum is not a function.

2. x = print
   y = print "woohoo!"
   z = x "hello world"

   It compile.

3. a = (+)
   b = 5
   c = b 10
   d = c 200

   It does not compile, b is not a function.

4. a = 12 + b
   b = 10000 * c

   It does not compile, b and c is not define.
